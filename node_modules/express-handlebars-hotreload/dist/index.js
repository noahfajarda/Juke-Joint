"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hotreload = exports.__hotreload = exports.create = exports.engine = void 0;
var dotenv = require("dotenv");
var ws_1 = require("ws");
var glob = require("glob");
var fs = require("fs");
var chokidar = require("chokidar");
var child_process_1 = require("child_process");
var lib_1 = require("./lib");
Object.defineProperty(exports, "engine", { enumerable: true, get: function () { return lib_1.engine; } });
Object.defineProperty(exports, "create", { enumerable: true, get: function () { return lib_1.create; } });
dotenv.config();
var DEV = process.env.DEV;
var timeout;
var wait = false;
var refresh = function (ws) {
    console.log("\uD83D\uDD25 File changed, refreshing");
    ws.send("refresh", function (err) {
        if (err) {
            if (DEV)
                console.log(err);
        }
    });
};
var DEFAULT_GLOB = "**/*";
function __hotreload(_a) {
    var _b = _a.port, port = _b === void 0 ? 8080 : _b, _c = _a._glob, _glob = _c === void 0 ? DEFAULT_GLOB : _c;
    // Creating a new websocket server
    var wss = new ws_1.WebSocketServer({ port: port });
    // Creating connection using websocket
    wss.on("connection", function (ws) {
        // listen for changes in a glob of files and send a message to the client
        // when a change occurs
        var watcher = chokidar.watch(process.cwd() + _glob);
        // glob sync
        glob.sync(process.cwd() + _glob).forEach(function (file) {
            watcher.add(file);
        });
        watcher.on("change", function (path) {
            if (DEV)
                console.log("refreshing");
            refresh(ws);
        });
        ws.onclose = function () {
            if (DEV)
                console.log("Client disconnected");
        };
        // handling client connection error
        ws.onerror = function () {
            if (DEV)
                console.log("Some Error occurred");
        };
    });
    wss.on("error", function (err) {
        if (err.message.includes("EADDRINUSE")) {
            console.log("\uD83D\uDD25 Port ".concat(port, " is already in use"));
            process.exit(1);
        }
    });
    return port;
}
exports.__hotreload = __hotreload;
function hotreload(options) {
    if (options === void 0) { options = {}; }
    // get the current file
    var __port = options.port || 8080;
    var __glob = options.glob || DEFAULT_GLOB;
    var file = fs.readFileSync(__filename, "utf8").replace("var lib_1 = require(\"./lib\");", "");
    var fn = file + "\n__hotreload({ port: ".concat(__port, ", _glob: \"").concat(__glob, "\" });");
    var child = (0, child_process_1.spawn)("node", ["-e", fn]);
    child.stdout.on("data", function (data) {
        console.log(data.toString());
    });
    child.stderr.on("data", function (data) {
        console.log(data.toString());
    });
    child.on("close", function (code) {
        console.log("\uD83D\uDD25 Stopping hotreload server with code ".concat(code));
        process.exit(0);
    });
    // if the main thread exits, kill the child process
    process.on("exit", function () {
        child.kill();
    });
}
exports.hotreload = hotreload;
//# sourceMappingURL=index.js.map